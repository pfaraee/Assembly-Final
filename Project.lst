Microsoft (R) Macro Assembler Version 14.00.24210.0	    06/09/17 23:37:10
final_lib.asm						     Page 1 - 1


				; File describing all methods I created for my final project
				;

				.model flat, stdcall ; why does this need to be here?
				WriteString proto
				Crlf proto
				ReadChar proto
				ReadString proto
				OpenInputFile proto
				ReadFromFile proto
				WriteChar proto
				CloseFile proto
				StrLength proto
				WriteInt proto
				RandomRange proto
				Str_copy proto
				Randomize proto
				WriteWindowsMsg proto
				ExitProcess proto,dwExitCode:dword


 00000000			.data
 00000000 47 61 6D 65 4F	gameoverMSG BYTE "GameOver.", 0
	   76 65 72 2E 00
 0000000A 43 3A 5C 49 72	descriptionFile BYTE "C:\Irvine\Irvine\Final_Project\Text.txt", 0
	   76 69 6E 65 5C
	   49 72 76 69 6E
	   65 5C 46 69 6E
	   61 6C 5F 50 72
	   6F 6A 65 63 74
	   5C 54 65 78 74
	   2E 74 78 74 00
 00000032 00000000		filehandle DWORD ?
 = 00001388			BUFSIZE = 5000
 00000036  00001388 [		buffer BYTE BUFSIZE DUP(?)
	    00
	   ]
 000013BE  00001389 [		descriptionString BYTE BUFSIZE + 1 DUP(?)
	    00
	   ]
 00002747 00000000		bytesRead DWORD ?


 00000000			.code
				; method to write string to line
				; put string offset in edx 
 00000000			writeLine proc
 00000000  E8 00000000 E		call WriteString
 00000005  E8 00000000 E		call Crlf

 0000000A  C3				ret
 0000000B			writeLine endp

				; method to get valid user input onw which door to choose
				; puts input char in al
				; game over if input is invalid
 0000000B			getDoor proc
 0000000B  E8 00000000 E		call ReadChar

 00000010  3C 77			cmp al, 'w'
 00000012  74 0D			jz validDoor

 00000014  3C 6E			cmp al, 'n'
 00000016  74 09			jz validDoor

 00000018  3C 65			cmp al, 'e'
 0000001A  74 05			jz validDoor

 0000001C  E8 00000014			call gameOver

 00000021  C3				validDoor: ret
 00000022			getDoor endp

 00000022			getYesOrNo proc
 00000022  E8 00000000 E		call ReadChar

 00000027  3C 79			cmp al, 'y'
 00000029  74 09			jz good
					
 0000002B  3C 6E			cmp al, 'n'
 0000002D  74 05			jz good

 0000002F  E8 00000001			call gameOver

 00000034  C3				good: ret
 00000035			getYesOrNo endp

				; function that ends the game
 00000035			gameOver proc
 00000035  BA 00000000 R		mov edx, offset gameoverMSG
 0000003A  E8 FFFFFFC1			call writeLine

					invoke ExitProcess,0
 0000003F  6A 00	   *	    push   +000000000h
 00000041  E8 00000000 E   *	    call   ExitProcess
 00000046			gameOver endp

 00000046			getDescription proc
 00000046  BA 0000000A R		mov edx, offset descriptionFile
 0000004B  E8 00000000 E		call OpenInputFile
 00000050  A3 00000032 R		mov filehandle, eax
 00000055  BA 00000036 R		mov edx, offset buffer
 0000005A  B9 00001388			mov ecx, BUFSIZE
 0000005F  E8 00000000 E		call ReadFromFile
 00000064  72 2C			jc show_error_message

 00000066  A3 00002747 R		mov bytesRead, eax

 0000006B  B8 00000003			mov eax, 3
 00000070  E8 00000000 E		call Randomize
 00000075  E8 00000000 E		call RandomRange
 0000007A  40				inc eax ; incs so its beween 1 and n now
 0000007B  8B D8			mov ebx, eax ; moves it because we use ebx in getStringFromBuffer

 0000007D  E8 00000015			call getStringFromBuffer
 00000082  E8 FFFFFF79			call writeLine

					

 00000087  A1 00000032 R		mov eax, filehandle
 0000008C  E8 00000000 E		call CloseFile

 00000091  C3				ret

 00000092				show_error_message:
 00000092  E8 00000000 E		call WriteWindowsMsg
 00000097			getDescription endp

				;; GETS NTH LINE STORED IN EBX, POINTS ESI TO THE ADRESS OF THE LINE
				;; STORES ADDRES INTO EDX
				;; uses ebx for the index starting at 1
 00000097			getStringFromBuffer proc
 00000097  BE 00000036 R		mov esi, offset buffer ; MAYBE JUST GET RID OF THIS SOON
 0000009C  8B CB			mov ecx, ebx ; counter

 0000009E			L1:	
 0000009E  8B D6			mov edx, esi
 000000A0  E8 00000000 E		call StrLength ;stored in eax
 000000A5  03 F0			add esi, eax ; adds length
 000000A7  46				inc esi ; ADDS ONE TO SKILL THE NULLCHAR
					; NOW ESI POINTS TO THE STRING I WANT
 000000A8  E2 F4			loop L1

 000000AA  8B D6			mov edx, esi

 000000AC  C3				ret
 000000AD			getStringFromBuffer endp
				end
Microsoft (R) Macro Assembler Version 14.00.24210.0	    06/09/17 23:37:10
final_lib.asm						     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
_DATA  . . . . . . . . . . . . .	32 Bit	 0000274B Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000000AD Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
gameOver . . . . . . . . . . . .	P Near	 00000035 _TEXT	Length= 00000011 Public STDCALL
getDescription . . . . . . . . .	P Near	 00000046 _TEXT	Length= 00000051 Public STDCALL
  show_error_message . . . . . .	L Near	 00000092 _TEXT	
getDoor  . . . . . . . . . . . .	P Near	 0000000B _TEXT	Length= 00000017 Public STDCALL
  validDoor  . . . . . . . . . .	L Near	 00000021 _TEXT	
getStringFromBuffer  . . . . . .	P Near	 00000097 _TEXT	Length= 00000016 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 0000009E _TEXT	
getYesOrNo . . . . . . . . . . .	P Near	 00000022 _TEXT	Length= 00000013 Public STDCALL
  good . . . . . . . . . . . . .	L Near	 00000034 _TEXT	
writeLine  . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000000B Public STDCALL


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
BUFSIZE  . . . . . . . . . . . .	Number	 00001388h   
buffer . . . . . . . . . . . . .	Byte	 00000036 _DATA	
bytesRead  . . . . . . . . . . .	DWord	 00002747 _DATA	
descriptionFile  . . . . . . . .	Byte	 0000000A _DATA	
descriptionString  . . . . . . .	Byte	 000013BE _DATA	
filehandle . . . . . . . . . . .	DWord	 00000032 _DATA	
gameoverMSG  . . . . . . . . . .	Byte	 00000000 _DATA	

	   0 Warnings
	   0 Errors
